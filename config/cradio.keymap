// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &msc SCRL_UP
#define U_WH_D &msc SCRL_DOWN
#define U_WH_L &msc SCRL_LEFT
#define U_WH_R &msc SCRL_RIGHT

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <RIG LEF>;
            then-layer = <TRI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&ht LS(Q) Q  &ht LS(D) D  &ht LS(R) R  &ht LS(W) W  &ht LS(B) B         &ht LS(J) J                 &ht LS(F) F    &ht LS(U) U          &ht LS(P) P            &ht LS(SEMICOLON) SEMICOLON
&ht LS(A) A  &ht LS(S) S  &ht LS(H) H  &ht LS(T) T  &ht LS(G) G         &ht LS(Y) Y                 &ht LS(N) N    &ht LS(E) E          &ht LS(O) O            &ht LS(I) I
&ht LS(Z) Z  &ht LS(X) X  &ht LS(M) M  &ht LS(C) C  &ht LS(V) V         &ht LS(K) K                 &ht LS(L) L    &ht LS(COMMA) COMMA  &ht LS(PERIOD) PERIOD  &ht LS(SLASH) SLASH
                                       &lt LEF TAB  &mt LCTRL ESCAPE    &mt LS(LA(LC(LGUI))) SPACE  &lt RIG ENTER
            >;
        };

        windows_layer {
            bindings = <
&kp Q  &kp W       &kp E       &kp R        &kp T        &kp Y      &kp U        &kp I       &kp O       &kp P
&kp A  &ht LALT S  &ht LGUI D  &ht LCTRL F  &kp G        &kp H      &ht RCTRL J  &ht RGUI K  &ht RALT L  &kp BSPC
&kp Z  &kp X       &kp C       &kp V        &kp B        &kp N      &kp M        &kp COMMA   &kp DOT     &kp ENTER
                               &lt LEF TAB  &kp SPACE    &kp ENTER  &lt RIG TAB
            >;
        };

        right_layer {
            bindings = <
&kp TAB     &trans       &trans         &trans   &trans    &trans           &trans    &trans    &trans      &kp BACKSPACE
&kp ESCAPE  &trans       &trans         &trans   &trans    &trans           &kp LEFT  &kp UP    &kp RIGHT   &kp LEFT_META
&kp HOME    &kp PAGE_UP  &kp PAGE_DOWN  &kp END  &trans    &kp PRINTSCREEN  &kp INS   &kp DOWN  &kp DELETE  &trans
                                        &trans   &trans    &trans           &trans
            >;
        };

        left_layer {
            bindings = <
&kp F2                     &kp F3                     &kp F4                     &kp F5                     &kp F6                               &kp F7                               &kp F8                                     &kp F9                     &kp F10                    &kp F11
&ht LS(NUMBER_1) NUMBER_1  &ht LS(NUMBER_2) NUMBER_2  &ht LS(NUMBER_3) NUMBER_3  &ht LS(NUMBER_4) NUMBER_4  &ht LS(NUMBER_5) NUMBER_5            &ht LS(NUMBER_6) NUMBER_6            &ht LS(NUMBER_7) NUMBER_7                  &ht LS(NUMBER_8) NUMBER_8  &ht LS(NUMBER_9) NUMBER_9  &ht LS(NUMBER_0) NUMBER_0
&kp F1                     &trans                     &trans                     &ht LS(GRAVE) GRAVE        &ht LS(LEFT_BRACKET) LEFT_BRACKET    &ht LS(RIGHT_BRACKET) RIGHT_BRACKET  &ht LS(NON_US_BACKSLASH) NON_US_BACKSLASH  &trans                     &ht LS(MINUS) MINUS        &kp F12
                                                                                 &trans                     &trans                               &tog MOUSE                           &trans
            >;
        };

        tri_layer {
            bindings = <
&kp F1       &kp F2   &kp F3   &kp F4   &bt BT_SEL 0    &bt BT_SEL 2  &out OUT_TOG   &tog WIN  &kp C_MUTE    &kp C_PREV
&kp F5       &kp F6   &kp F7   &kp F8   &bt BT_SEL 1    &bt BT_SEL 3  &kp C_BRI_UP   &trans    &kp C_VOL_UP  &kp C_PP
&bootloader  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &bt BT_SEL 4  &kp C_BRI_DEC  &trans    &kp C_VOL_DN  &kp C_NEXT
                               &trans   &trans          &trans        &trans
            >;
        };

        mouse {
            bindings = <
&tog MOUSE  &mkp MB4  &mkp MCLK  &mkp MB5   &trans        &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &tog MOUSE
&trans      &trans    &trans     &trans     &trans        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans      &trans    &trans     &trans     &trans        &trans          &mkp MB4        &mkp MCLK     &mkp MB5         &trans
                                 &kp SPACE  &kp LSHIFT    &mkp LCLK       &mkp RCLK
            >;
        };
    };
};
